name: Build

on:
  push:
    tags: [ "v*" ]
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  wheels:
    # Separate native runners so mac gets native arm64 & x86_64 (universal2), Windows gets MSVC, etc.
    strategy:
      fail-fast: false
      max-parallel: 64
      matrix:
        build:
          # Linux
          - { os: ubuntu-latest,    platform: linux,   archs: x86_64, arch_label: "x86_64" }
          - { os: ubuntu-24.04-arm, platform: linux,   archs: aarch64, arch_label: "ARM64" }
          # - { os: ubuntu-latest, platform: linux, archs: ppc64le, arch_label: "ppc64le" }
          # - { os: ubuntu-latest, platform: linux, archs: s390x,   arch_label: "s390x" }
          # Windows
          - { os: windows-latest,   platform: windows, archs: AMD64,  arch_label: "x64" }
          - { os: windows-11-arm,   platform: windows, archs: ARM64,  arch_label: "ARM64" }
          # macOS
          - { os: macos-15,         platform: macos,   archs: arm64,  arch_label: "Apple Silicon" }
          - { os: macos-15-intel,   platform: macos,   archs: x86_64, arch_label: "Intel" }
        python:
          - { display: "3.10", tag: "cp310" }
          - { display: "3.11", tag: "cp311" }
          - { display: "3.12", tag: "cp312" }
          - { display: "3.13", tag: "cp313" }
          - { display: "3.14", tag: "cp314" }

    runs-on: ${{ matrix.build.os }}

    name: "Python ${{ matrix.python.display }} / ${{ fromJSON('{\"linux\":\"Linux\",\"windows\":\"Windows\",\"macos\":\"macOS\"}')[matrix.build.platform] }} / ${{ matrix.build.arch_label }}"

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        if: runner.os == 'Linux' && runner.arch == 'X64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.1
        env:
          CIBW_BUILD: "${{ matrix.python.tag }}-*"
          CIBW_ARCHS: "${{ matrix.build.archs }}"
          CIBW_BUILD_VERBOSITY: 1

      - uses: actions/upload-artifact@v4
        with:
          name: "Wheels-${{ matrix.python.display }}-${{ fromJSON('{\"linux\":\"Linux\",\"windows\":\"Windows\",\"macos\":\"macOS\"}')[matrix.build.platform] }}-${{ matrix.build.arch_label }}"
          path: ./wheelhouse/*.whl

      - name: Clone pyperformance
        run: git clone https://github.com/python/pyperformance.git --depth 1

      - name: Find wheel
        id: wheel
        run: echo "path=$(ls wheelhouse/*.whl)" >> $GITHUB_OUTPUT

      - name: Run stdlib pyperf benchmark
        run: uv run --with pyperf pyperformance/data-files/benchmarks/bm_deepcopy/run_benchmark.py -o copy-${{ matrix.python.tag }}-${{ matrix.build.platform }}-${{ matrix.build.archs }}.json

      - name: Run copium pyperf benchmark
        env:
          COPIUM_PATCH_DEEPCOPY: 1
        run: uv run --with ${{ steps.wheel.outputs.path }} --with pyperf pyperformance/data-files/benchmarks/bm_deepcopy/run_benchmark.py -o copium-${{ matrix.python.tag }}-${{ matrix.build.platform }}-${{ matrix.build.archs }}.json

      - name: Upload pyperf jsons
        uses: actions/upload-artifact@v4
        with:
          name: pyperf-${{ matrix.python.tag }}-${{ matrix.build.platform }}-${{ matrix.build.arch_label }}
          path: |
            copy-*.json
            copium-*.json

      - name: Sync deps without project
        run: uv sync --extra test --no-install-project

      - name: Install wheel
        run: uv pip install ${{ steps.wheel.outputs.path }}

      - name: Run codspeed benchmarks
        uses: CodSpeedHQ/action@v4
        with:
          mode: instrumentation
          run: uv run --no-sync pytest tests/ --codspeed

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Build sdist
        run: uv build --sdist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  aggregate-benchmarks:
    name: Aggregate benchmarks
    runs-on: ubuntu-latest
    needs: wheels
    steps:
      - uses: actions/checkout@v4
      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Download pyperf artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: pyperf-*
      - name: Run aggregation script
        run: uv run tools/aggregate_benchmarks.py
      - name: Upload BENCHMARKS.md
        uses: actions/upload-artifact@v4
        with:
          name: benchmarks-md
          path: BENCHMARKS.md
      - name: Update assets on main
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add assets/*.svg BENCHMARKS.md
          git commit -m "Update benchmark assets and BENCHMARKS.md from CI" || echo "No changes to commit"
          git push

  aggregate-benchmarks:
    name: Aggregate benchmarks
    runs-on: ubuntu-latest
    needs: wheels
    steps:
      - uses: actions/checkout@v4
      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Download pyperf artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: pyperf-*
      - name: Run aggregation script
        run: uv run tools/aggregate_benchmarks.py
      - name: Upload BENCHMARKS.md
        uses: actions/upload-artifact@v4
        with:
          name: benchmarks-md
          path: BENCHMARKS.md
      - name: Update assets on main
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add assets/*.svg BENCHMARKS.md
          git commit -m "Update benchmark assets and BENCHMARKS.md from CI" || echo "No changes to commit"
          git push

